{"version":3,"sources":["components/recipe/Recipe.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","image","calories","ingredients","className","src","alt","map","ingredient","index","key","text","Search","search","updateSearch","type","value","onChange","placeholder","App","useState","recipes","setRecipes","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","hits","getRecipes","onSubmit","e","preventDefault","target","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAyBeA,G,YAtBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAiBC,GAAyB,EAAnCC,SAAmC,EAAzBD,OAAOE,EAAkB,EAAlBA,YACxC,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,UACb,yBAAKC,IAAKJ,EAAOK,IAAI,MAEvB,wBAAIF,UAAU,SAASJ,GACvB,yBAAKI,UAAU,mBACb,4CACA,wBAAIA,UAAU,eACXD,EAAYI,KAAI,SAACC,EAAYC,GAAb,OACf,wBAAIL,UAAU,aAAaM,IAAKD,GAC9B,uBAAGL,UAAU,uBACZI,EAAWG,cCIXC,G,MAjBA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACxB,OACE,6BACE,2BACEV,UAAU,aACVW,KAAK,OACLC,MAAOH,EACPI,SAAUH,EACVI,YAAY,4BAEd,4BAAQd,UAAU,gBAAgBW,KAAK,UAAvC,aC4CSI,EAnDH,WACV,IADgB,EAGcC,mBAAS,IAHvB,mBAGTC,EAHS,KAGAC,EAHA,OAIYF,mBAAS,IAJrB,mBAITP,EAJS,KAIDU,EAJC,OAKUH,mBAAS,WALnB,mBAKTI,EALS,KAKFC,EALE,KAOhBC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSJ,EADT,mBARjB,WAQiB,oBAPhB,qCAMK,cACXK,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBT,EAAWS,EAAKC,MALC,2CAAH,qDAOhBC,KACC,CAACT,IAYJ,OACE,yBAAKpB,UAAU,OACb,4BAAQA,UAAU,UAChB,wBAAIA,UAAU,SAAd,0BACA,0BAAM8B,SAVM,SAACC,GACjBA,EAAEC,iBACFX,EAASZ,GACTU,EAAU,KAOqBnB,UAAU,eACnC,kBAAC,EAAD,CAAQU,aAfK,SAACqB,GACpBZ,EAAUY,EAAEE,OAAOrB,QAcuBH,OAAQA,MAGhD,yBAAKT,UAAU,WACZiB,EAAQd,KAAI,SAAC+B,GAAD,OACX,kBAAC,EAAD,CACE5B,IAAK4B,EAAOA,OAAOC,MACnBvC,MAAOsC,EAAOA,OAAOC,MACrBrC,SAAUoC,EAAOA,OAAOpC,SACxBD,MAAOqC,EAAOA,OAAOrC,MACrBE,YAAamC,EAAOA,OAAOnC,oBCrCnBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3534e0a9.chunk.js","sourcesContent":["import React from 'react';\nimport './recipe.style.css';\n\nconst Recipe = ({ title, calories, image, ingredients }) => {\n  return (\n    <div className=\"recipe\">\n      <div className=\"images\">\n        <img src={image} alt=\"\" />\n      </div>\n      <h3 className=\"title\">{title}</h3>\n      <div className=\"ingredients-div\">\n        <p>Ingredients :</p>\n        <ul className=\"ingredients\">\n          {ingredients.map((ingredient, index) => (\n            <li className=\"ingredient\" key={index}>\n              <i className=\"fas fa-caret-right\" />\n              {ingredient.text}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React from 'react';\nimport './search.style.css';\n\nconst Search = ({ search, updateSearch }) => {\n  return (\n    <div>\n      <input\n        className=\"search-bar\"\n        type=\"text\"\n        value={search}\n        onChange={updateSearch}\n        placeholder=\"Search your recipe here\"\n      />\n      <button className=\"search-button\" type=\"submit\">\n        Search\n      </button>\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport Recipe from './components/recipe/Recipe';\nimport Search from './components/search/Search';\n\nconst App = () => {\n  const APP_ID = '7762ab4a';\n  const APP_KEY = 'eba304d106482921d2e59878b46b7734';\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n\n  useEffect(() => {\n    const getRecipes = async () => {\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n      const data = await response.json();\n      setRecipes(data.hits);\n    };\n    getRecipes();\n  }, [query]);\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1 className=\"title\">Find Your Recipe Today</h1>\n        <form onSubmit={getSearch} className=\"search-from\">\n          <Search updateSearch={updateSearch} search={search} />\n        </form>\n      </header>\n      <div className=\"recipes\">\n        {recipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}